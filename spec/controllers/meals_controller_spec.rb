require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MealsController do

  # This should return the minimal set of attributes required to create a valid
  # Meal. As you add validations to Meal, be sure to
  # update the return value of this method accordingly.

  before(:each) do
    simulate_signed_in
    @user = controller.current_user
    @user.meals << Meal.create
    @user.meals << Meal.create
    @user.meals << Meal.create
    @valid_attributes = { :user_id => '1' }
    @meals = @user.meals
    @meal = @user.meals.first
  end

  describe "GET index" do
    it "assigns all meals as @meals" do
      get :index
      meals = assigns(:meals)
      meals.size.should == 3
    end
  end

  describe "GET show" do
    it "assigns the requested meal as @meal" do
      meal = Meal.create :user=> @user
      get :show, :id => meal.id
      assigns(:meal).should eq(meal)
    end
  end

  describe "GET new" do
    it "assigns a new meal as @meal" do
      get :new
      assigns(:meal).should be_a_new(Meal)
    end
  end

  describe "GET edit" do
    it "assigns the requested meal as @meal" do
      meal = Meal.create :user => @user
      get :edit, :id => meal.id
      assigns(:meal).should eq(meal)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Meal" do
        expect {
          post :create, :meal => @valid_attributes
        }.to change(Meal, :count).by(1)
      end

      it "assigns a newly created meal as @meal" do
        post :create, :meal => @valid_attributes
        assigns(:meal).should be_a(Meal)
        assigns(:meal).should be_persisted
      end

      it "redirects to the created meal" do
        post :create, :meal => @valid_attributes
        response.should redirect_to(Meal.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved meal as @meal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Meal.any_instance.stub(:save).and_return(false)
        post :create, :meal => {}
        assigns(:meal).should be_a_new(Meal)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Meal.any_instance.stub(:save).and_return(false)
        post :create, :meal => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested meal" do
        meal = Meal.create! valid_attributes
        # Assuming there are no other meals in the database, this
        # specifies that the Meal created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Meal.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => meal.id, :meal => {'these' => 'params'}
      end

      it "assigns the requested meal as @meal" do
        meal = Meal.create! valid_attributes
        put :update, :id => meal.id, :meal => valid_attributes
        assigns(:meal).should eq(meal)
      end

      it "redirects to the meal" do
        meal = Meal.create! valid_attributes
        put :update, :id => meal.id, :meal => valid_attributes
        response.should redirect_to(meal)
      end
    end

    describe "with invalid params" do
      it "assigns the meal as @meal" do
        meal = Meal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Meal.any_instance.stub(:save).and_return(false)
        put :update, :id => meal.id, :meal => {}
        assigns(:meal).should eq(meal)
      end

      it "re-renders the 'edit' template" do
        meal = Meal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Meal.any_instance.stub(:save).and_return(false)
        put :update, :id => meal.id, :meal => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested meal" do
      meal = Meal.create! valid_attributes
      expect {
        delete :destroy, :id => meal.id
      }.to change(Meal, :count).by(-1)
    end

    it "redirects to the meals list" do
      meal = Meal.create! valid_attributes
      delete :destroy, :id => meal.id
      response.should redirect_to(meals_url)
    end
  end

end
